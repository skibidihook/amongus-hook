local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local ImGui = {}
local state = { windows = {}, current = nil, mousePos = Vector2.new(), mouseDown = false }

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        state.mousePos = input.Position
    end
end)
UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        state.mouseDown = true
    end
end)
UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        state.mouseDown = false
    end
end)

function ImGui.BeginWindow(name, x, y, width, height)
    state.current = { name = name, x = x, y = y, width = width, height = height, elems = {}, cursorY = 20 }
end

function ImGui.Button(label, width, height)
    assert(state.current, "Button() must be between BeginWindow() and EndWindow()")
    width = width or 100; height = height or 30
    local elem = { type = "Button", label = label, x = 5, y = state.current.cursorY, width = width, height = height, clicked = false }
    table.insert(state.current.elems, elem)
    state.current.cursorY = state.current.cursorY + height + 5
    return elem
end

function ImGui.EndWindow()
    assert(state.current, "EndWindow() without BeginWindow()")
    table.insert(state.windows, state.current)
    state.current = nil
end

local function drawRect(x, y, w, h, color, filled)
    local rect = Drawing.new("Square")
    rect.Position = Vector2.new(x, y)
    rect.Size = Vector2.new(w, h)
    rect.Color = color
    rect.Filled = filled or true
    rect.Thickness = 1
    return rect
end

local function drawText(text, x, y, size)
    local txt = Drawing.new("Text")
    txt.Text = text
    txt.Position = Vector2.new(x, y)
    txt.Size = size or 16
    txt.Center = false
    txt.Outline = true
    return txt
end

RunService.RenderStepped:Connect(function()
    for _, win in ipairs(state.windows) do
        for _, elem in ipairs(win.elems) do
            if elem._rect then elem._rect:Remove() end
            if elem._text then elem._text:Remove() end
        end
        if win._bg then win._bg:Remove() end
        if win._title then win._title:Remove() end
    end
    state.windows = {}

    for _, win in ipairs(state.windows) do end
    if state.current then table.insert(state.windows, state.current) end

    for _, win in ipairs(state.windows) do
        win._bg = drawRect(win.x, win.y, win.width, win.height, Color3.fromRGB(45,45,48), true)
        win._title = drawText(win.name, win.x + 5, win.y + 2, 18)
        for _, elem in ipairs(win.elems) do
            local ex, ey = win.x + elem.x, win.y + elem.y
            elem._rect = drawRect(ex, ey, elem.width, elem.height, Color3.fromRGB(70,70,75), true)
            elem._text = drawText(elem.label, ex + 5, ey + (elem.height/2 - 8), 16)
            if state.mouseDown then
                local mx, my = state.mousePos.X, state.mousePos.Y
                if mx >= ex and mx <= ex + elem.width and my >= ey and my <= ey + elem.height then
                    elem.clicked = true
                end
            end
        end
    end
end)

return ImGui
